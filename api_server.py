#!/usr/bin/env python3
"""
api_server.py - API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–∞—Ä—Å–µ—Ä–∞
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTP endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º.
"""
import os
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import redis.asyncio as aioredis
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="VkusVill Parser API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –í–∫—É—Å–í–∏–ª–ª",
    version="1.0.0"
)

# Redis –∫–ª–∏–µ–Ω—Ç
redis_client = None


async def get_redis():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Redis –∫–ª–∏–µ–Ω—Ç–∞."""
    global redis_client
    if not redis_client:
        redis_url = os.getenv("REDIS_PUBLIC_URL", "redis://localhost:6379")
        redis_client = await aioredis.from_url(
            redis_url,
            encoding="utf-8",
            decode_responses=True
        )
    return redis_client


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    logger.info("üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    await get_redis()


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    global redis_client
    if redis_client:
        await redis_client.close()
    logger.info("üõë API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint."""
    return {
        "service": "VkusVill Parser API",
        "status": "running",
        "endpoints": {
            "health": "/admin/health",
            "parse_full": "/admin/parse_full",
            "queue_status": "/admin/queue_status"
        }
    }


@app.get("/admin/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        redis = await get_redis()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        await redis.ping()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º heartbeat –≤–æ—Ä–∫–µ—Ä–∞
        heartbeat = await redis.get("parser:heartbeat")
        worker_alive = False

        if heartbeat:
            last_beat = datetime.fromisoformat(heartbeat)
            time_diff = (datetime.now() - last_beat).total_seconds()
            worker_alive = time_diff < 60  # –°—á–∏—Ç–∞–µ–º –∂–∏–≤—ã–º –µ—Å–ª–∏ heartbeat < 60 —Å–µ–∫

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        data_files = list(Path("data").glob("moscow_improved_*.csv"))
        has_data = len(data_files) > 0

        return {
            "status": "healthy" if (worker_alive and has_data) else "degraded",
            "timestamp": datetime.now().isoformat(),
            "components": {
                "redis": "connected",
                "worker": "alive" if worker_alive else "dead",
                "data": "available" if has_data else "missing"
            }
        }

    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "error": str(e)
            }
        )


@app.post("/admin/parse_full")
async def trigger_full_parsing():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    try:
        redis = await get_redis()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        task = {
            "task_id": f"admin_full_{int(datetime.now().timestamp())}",
            "user_id": 0,
            "mode": "full",
            "admin_command": True,
            "timestamp": datetime.now().isoformat()
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        await redis.rpush("parsing_queue", json.dumps(task))

        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: {task['task_id']}")

        return {
            "status": "success",
            "message": "Full parsing triggered",
            "task_id": task["task_id"]
        }

    except Exception as e:
        logger.error(f"Failed to trigger full parsing: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/admin/queue_status")
async def queue_status():
    """–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á."""
    try:
        redis = await get_redis()

        # –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        queue_size = await redis.llen("parsing_queue")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
        stats_json = await redis.get("parser:stats")
        stats = json.loads(stats_json) if stats_json else {}

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
        recent_tasks = []

        return {
            "queue_size": queue_size,
            "worker_stats": stats,
            "recent_tasks": recent_tasks,
            "timestamp": datetime.now().isoformat()
        }

    except Exception as e:
        logger.error(f"Failed to get queue status: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/admin/clear_queue")
async def clear_queue():
    """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á."""
    try:
        redis = await get_redis()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        queue_size = await redis.llen("parsing_queue")

        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        await redis.delete("parsing_queue")

        logger.info(f"üßπ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞: {queue_size} –∑–∞–¥–∞—á")

        return {
            "status": "success",
            "cleared": queue_size,
            "timestamp": datetime.now().isoformat()
        }

    except Exception as e:
        logger.error(f"Failed to clear queue: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn

    port = int(os.getenv("API_PORT", "8080"))

    uvicorn.run(
        "api_server:app",
        host="0.0.0.0",
        port=port,
        reload=False,
        log_level="info"
    )